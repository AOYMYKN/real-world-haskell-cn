第26章 高级库设计：构建一个布隆过滤器
==========================================

布隆过滤器介绍
----------------

布隆过滤器（Bloom Filter）是类似集合的一种数据结构，它的特点是空间利用的高效性。布隆过滤器只支持两种操作：插入和成员查询。与常规的集合数据结构不同，布隆过滤器可能会给出不正确的结果。如果我们查询的某个元素存在，布隆过滤器会返回肯定的结果。但是如果我们查询一个之前未插入的元素，布隆过滤器可能会返回错误的结果，即仍声称它是存在的。

对大多数应用来说，低概率的误判是可以容忍的。举个例子，网络流量整形（traffic shaper）的主要工作是限制批量传输（比如 BitTorrent），使得一些交互式会话（比如 ``ssh`` 或者游戏）可以得到优秀的响应时间。流量整形可能会使用布隆过滤器来判断一个特定会话的数据包是批量的还是交互的。如果布隆过滤器在 10000 个批量数据包中误判其中的 1 个为交互式数据包且没有截止，也不会造成任何问题。

布隆过滤器吸引人的地方在于它的空间效率。举个例子，假设现在有一个包含一百万个单词的词典，我们想基于这个词典构建一个拼写检查器，若使用集合数据结构则可能会消耗 20MB 的空间。相比之下，布隆过滤器会消耗大约 0.5MB，代价是漏掉大约 1% 拼错的单词。

布隆过滤器的内部非常简单。它由一个位数组（bit array）和少数哈希函数组成。我们使用 k 表示哈希函数的数量。向布隆过滤器中插入数据时，先用哈希函数为数据计算出 k 个哈希值，然后在位数组中将这些位设置为 1。如果我们想要看看某个数据是否存在，那么就为这个数据计算出 k 个哈希值，然后检查位数组中这些哈希值的位是否都为 1。

下面通过一个例子理解整个过程。现在我们想向布隆过滤器中插入字符串 ``"foo"`` 和 ``"bar"`` ，这个布隆过滤器有 8 位宽，并且我们有两个哈希函数：

1. 假设用两个哈希函数分别计算 ``"foo"`` 的哈希值，得到 ``1`` 和 ``6``
2. 在位数组中置位 ``1`` 和 ``6``
3. 同样用 1 中的两个哈希函数计算 ``"bar"`` 的哈希值，得到 ``6`` 和 ``3``
4. 在位数组中置位 ``6`` 和 ``3``

这个例子解释了为什么我们不能从布隆过滤器中移除一个元素：插入 ``"foo"`` 和 ``"bar"`` 都会导致位数组中的第 ``6`` 位被置位。

假设我们现在想要查询布隆过滤器中 ``"quux"`` 和 ``"baz"`` 是否存在：

1. 用和之前相同的两个哈希函数计算 ``"quux"`` 的哈希值，得到 ``4`` 和 ``0``
2. 检查位数组中的位 ``4``，位 ``4`` 没有被置位，所以 ``"quux"`` 不可能存在，我们不需要检查位 ``0``
3. 计算 ``“baz”`` 的两个哈希值，得到 ``1`` 和 ``3``
4. 检查位数组中的位 ``1`` ，位 ``1`` 被置位；同样，位 ``3`` 也被置位。所以我们认为 ``"baz"`` 存在。但是实际上 ``"bar"`` 并不存在，这里我们得到了一个误判。

如果你想了解布隆过滤器的一些使用案例，请参阅 [Broder02]_

使用场景与封装设计
------------------

不是所有布隆过滤器的使用都有相同的需求。在某些使用场景中，只需要一次性创建布隆过滤器，之后只有查询。对其他应用，我们可能需要在创建布隆过滤器之后持续更新。为了适应这些需求，我们将使用可变与不可变的 API 来设计我们的库。

我们将可变与不可变的API分离，通过把他们放在不同的模块中： ``BloomFilter`` 用于不可变的代码，``BloomFilter.Mutable`` 用于可变代码。

另外，我们将创建一些辅助模块，这些模块不会在公开的API中出现，但它们可以让内部代码变得更清晰。

最后，我们让API的使用者提供用来产生多个哈希的函数。这个函数的类型是 ``a -> [Word32]`` 。我们将使用这个函数返回的全部哈希值，所以这个函数返回的列表不能为无穷的。

基本设计
------------------

我们为 Haskell 中布隆过滤器使用的数据结构和之前我们给出的简单介绍中相同：一个位数组和一个能够计算多个哈希值的函数

::

    -- file: BloomFilter/Internal.hs
    module BloomFilter.Internal
        (
          Bloom(..)
        , MutBloom(..)
        ) where

    import Data.Array.ST (STUArray)
    import Data.Array.Unboxed (UArray)
    import Data.Word (Word32)

    data Bloom a = B {
          blmHash  :: (a -> [Word32])
        , blmArray :: UArray Word32 Bool
        }

当我们创建我们的 Cabal 包时，我们不会导出这个 ``BloomFilter.Internal`` 模块。这个模块的存在纯粹是为了让我们控制名称的可见性。我们把 ``BloomFilter.Internal`` 导入可变和不可变的模块中，但是我们会从各个模块中重新导出和模块 API 相关的类型。

拆箱，提升和bottom
^^^^^^^^^^^^^^^^^^^^^^^^

与其他 Haskell 的数组不同， ``UArray`` 包含未装箱的值。

对于一个常规的 Haskell 类型来说，它的值既可以是完全求值的（full evaluated），也可以是未求值的形式程序（thunk），又或者特殊值 ``⊥`` ，发音（有时候也写作）为 "bottom"。值 ``⊥`` 是一个用来表示计算未成功的占位符。这里的计算可以有多种形式。它可能是一个无限循环，一个 ``error`` 应用，或者特殊值 ``undefined`` 。

一个可以包含bottom的类型被称为已提升的。所有常规Haskell类型都是已提升的。实际中，这意味着我们可以写 ``error "eek!"`` 或者 ``undefined`` 来代替常规表达式。

存储形式程序和 bottom 的能力会带来性能上的损耗：这种能力增加了额外的间接层。为了理解为什么我们需要这种间接，考虑 ``Word32`` 类型。这是类型的值是全 32 位宽的，所以在 32 位系统上，没有办法直接用 32 位来编码bottom。运行时系统不得不维护，并且检查一些额外的数据来跟踪这个值是不是 ``⊥`` 。

一个未装箱的值没有这种间接性。通过未装箱可以获得性能，但是牺牲了表示形式程序或者 bottom 的能力。因为未装箱的数组可以比常规 Haskell 的数组更加紧凑，所以这对于大量数据和位来说是一个非常好的选择。

  装箱和提升

  与未装箱类型相对应的是使用了间接层的装箱类型。所有提升的值都是装箱的，但是一些底层的装箱类型没有被提升。比如，GHC 的运行时系统有一个底层数组类型用于装箱（例如，它维护了一个数组的指针）。如果它是一个数组的引用，那么它知道数组肯定是存在的，所以它不需要关心 bottom 是否存在。所以这个数组类型是装箱的，但是未提升的。装箱但是未提升的类型仅展示了底层运行时的特殊实现（hacking）。在常规使用中我们不会遇到它们。

GHC实现了一个 ``Bool`` 类型的 ``UArray`` ，内部把 8 个数组元素组装为 1 个byte，所以这个类型非常适合我们的需求。

ST monad
---------------------------

回到 :ref:`modifying-array-elements` 部分。我们提到修改一个不可变的数组代价很高，因为这需要复制整个数组。即使使用 ``UArray`` ，这一问题仍然会存在，所以我们如何才能将复制不可变数组的代价降低到我们可以承受的水平呢？

在指令式语言中，我们可以简单地原地修改数组元素；我们也可以在 Haskell 中这么做。

Haskell 提供了一个特殊的 Monad，叫做 ``ST``  *（State Transformer）* 。 ``ST`` 允许我们安全地工作在可变状态下。与 ``State`` Monad 相比，它有一些强大的额外的功能。

* 我们可以解冻一个不可变数组得到一个可变数组；就地修改可变数组；和在完成时冻结出一个新的可变数组
* 我们可以使用 *可变引用 (mutable references)* 。这允许我们在构建数据结构之后修改它，就像在命令式语言中的一样。这个功能对于一些命令式数据结构和算法很重要，因为尚未找到类似的高效纯函数替代。

``IO`` Monad 同样提供了这些功能。两者的主要区别在于， ``ST`` Monad 是有意设计用来退回到纯 Haskell 代码的。和大部分 Haskell Monad（当然除了 ``IO`` ）一样，我们通过执行函数 ``runST`` 进入 ``ST`` Monad，然后通过从 ``runST`` 中 return 来退出。

当我们应用一个 Monad 的执行函数的时候，我们希望它可以反复运行：如果给予相同的函数体（body）和参数，我们每次都能得到相同的结果。这同样可以应用于 ``runST`` 。为了达到这种可重复性（repeatablility），``ST`` Monad比 ``IO`` Monad 更加严格。我们不能读写文件，创建全局变量，或者创建线程。甚至，即使我们可以创建并且使用可变的引用和数组，类型系统也不允许它们逃逸到 ``runST`` 的调用方。在我们能够返回数据之前，一个可变的数组必须被冻结（frozen）为一个不可变的数组，并且一个可变的引用完全不可以逃逸。

设计一个合格的输入API
------------------------

我们需要讨论一下用来处理布隆过滤器的公开接口。

::

  -- file: BloomFilter/Mutable.hs
  module BloomFilter.Mutable
      (
        MutBloom
      , elem
      , notElem
      , insert
      , length
      , new
      ) where

  import Control.Monad (liftM)
  import Control.Monad.ST (ST)
  import Data.Array.MArray (getBounds, newArray, readArray, writeArray)
  import Data.Word (Word32)
  import Prelude hiding (elem, length, notElem)

  import BloomFilter.Internal (MutBloom(..))

我们导出的函数中有几个和 Prelude 导出函数相冲突的名称。这么做是经过考虑的：我们希望用户使用限制名称导入我们的模块，这减轻了用户记忆的负担，因为他们对 Prelude 中的 ``elem`` ，``notElem`` 和 ``length`` 函数已经相当熟悉了。

我们通常使用单个字母的前缀来导入这种风格的模块。例如，用户在代码中使用 ``import qualified BloomFilter.Mutable as M`` 导入模块，此时用户可以将导入模块中的 ``length`` 写为 ``M.length`` ，这保持了代码的紧凑型和可读性。

我们也可以不使用限制名称导入模块，此时需要通过 ``import Prelude hiding (length)`` 来隐藏 Prelude 与模块相冲突的函数。我们不建议使用这种做法，因为它使读者容易忽视代码中的 ``length`` 并非 Prelude 模块的 ``length`` 。

当然，我们在上面定义的模块头中违背了这个规则：我们导入了 Prelude 并且隐藏了它的一些函数名。这是因为我们在模块中定义了自己的函数 ``length`` ，如果不先将 Prelude 包中的同名函数隐藏，编译器将无法确定它该导出我们自定义的 ``length`` 还是 Prelude 中的 ``length`` 。

虽然导出完全限定名称 ``BloomFilter.Mutable.length`` 能够消除歧义，但它看起来更丑陋。这个决定对使用模块的用户没有影响，它仅仅针对我们自己 —— 黑盒的设计者，所以这里一般不会导致混淆。

创建一个可变的布隆过滤器
------------------------

不可变的 API
-------------

创建友好的接口
--------------

导出更方便的名称
^^^^^^^^^^^^^^^^

哈希值
^^^^^^^

将两个哈希值转换为多个
^^^^^^^^^^^^^^^^^^^^^^

实现简单的创建函数
^^^^^^^^^^^^^^^^^^

创建一个 Cabal 包
-----------------

处理不同的构建设置
^^^^^^^^^^^^^^^^^^

编译选项和针对 C 的接口
^^^^^^^^^^^^^^^^^^^^^^^

用 QuickCheck 测试
------------------

多态测试
^^^^^^^^

为 ByteString 编写任意实例
^^^^^^^^^^^^^^^^^^^^^^^^^^

推荐大小是正确的吗？
^^^^^^^^^^^^^^^^^^^

性能分析和调优
--------------

配置驱动的性能调优
^^^^^^^^^^^^^^^^^^

练习
----


.. [Broder02] Andrei Broder. Michael Mitzenmacher. “Network applications of Bloom filters: a survey”. Internet Mathematics. 1. 4. 2005. 485-509. A K Peters Ltd..