第26章 高级库设计：构建一个布隆过滤器
==========================================

布隆过滤器介绍
----------------

布隆过滤器（Bloom Filter）是类似集合的一种数据结构，它的特点是空间利用的高效性。布隆过滤器只支持两种操作：插入和成员查询。与常规的集合数据结构不同，布隆过滤器可能会给出不正确的结果。如果我们查询的某个元素存在，布隆过滤器会返回肯定的结果。但是如果我们查询一个之前没有插入过的元素，那么布隆过滤器可能会返回错误的结果，即声称它是存在的。

对大多数应用来说，低概率的误判是可以容忍的。举个例子，网络流量整形（traffic shaper）的主要工作是限制批量传输（比如 BitTorrent），使得一些交互式会话（比如 ``ssh`` 或者游戏）可以得到优秀的响应时间。流量整形可能会使用布隆过滤器来判断一个特定会话的数据包是批量的还是交互的。如果布隆过滤器在 10000 个批量数据包中误判其中的 1 个为交互式数据包且没有截止，也不会造成任何问题。

布隆过滤器吸引人的地方在于它的空间效率。举个例子，假设现在有一个包含一百万个单词的词典，我们想基于这个词典构建一个拼写检查器，若使用集合数据结构则可能会消耗 20MB 的空间。相比之下，布隆过滤器会消耗大约 0.5MB，代价是漏掉大约 1% 拼错的单词。

布隆过滤器的内部非常简单。它由一个位数组（bit array）和少数哈希函数组成。我们使用 k 表示哈希函数的数量。向布隆过滤器中插入数据时，先用哈希函数为数据计算出 k 个哈希值，然后在位数组中将这些位设置为 1。如果我们想要看看某个数据是否存在，那么就为这个数据计算出 k 个哈希值，然后检查位数组中这些哈希值的位是否都为 1。

下面通过一个例子理解整个过程。现在我们想向布隆过滤器中插入字符串 ``"foo"`` 和 ``"bar"`` ，这个布隆过滤器有 8 位宽，并且我们有两个哈希函数：

1. 假设用两个哈希函数分别计算 ``"foo"`` 的哈希值，得到 ``1`` 和 ``6``
2. 在位数组中置位 ``1`` 和 ``6``
3. 同样用 1 中的两个哈希函数计算 ``"bar"`` 的哈希值，得到 ``6`` 和 ``3``
4. 在位数组中置位 ``6`` 和 ``3``

这个例子解释了为什么我们不能从布隆过滤器中移除一个元素：插入 ``"foo"`` 和 ``"bar"`` 都会导致位数组中的第 ``6`` 位被置位。

假设我们现在想要查询布隆过滤器中 ``"quux"`` 和 ``"baz"`` 是否存在：

1. 用和之前相同的两个哈希函数计算 ``"quux"`` 的哈希值，得到 ``4`` 和 ``0``
2. 检查位数组中的位 ``4``，位 ``4`` 没有被置位，所以 ``"quux"`` 不可能存在，我们不需要检查位 ``0``
3. 计算 ``“baz”`` 的两个哈希值，得到 ``1`` 和 ``3``
4. 检查位数组中的位 ``1`` ，位 ``1`` 被置位；同样，位 ``3`` 也被置位。所以我们认为 ``"baz"`` 存在。但是实际上 ``"bar"`` 并不存在，这里我们得到了一个误判。

如果你想了解布隆过滤器的一些使用案例，请参阅 [Broder02]_

使用场景与封装设计
------------------

不是所有布隆过滤器的使用需求都完全相同。在某些使用场景中，只需要一次性创建布隆过滤器，之后只有查询。对于其他应用，我们可能需要在创建布隆过滤器之后持续更新。我们通过把可变和不可变的 API 放在不同的模块中来对它们实施分离，其中 ``BloomFilter`` 用于实现不可变的布隆过滤器，而 ``BloomFilter.Mutable`` 则用于实现可变的布隆过滤器。

我们将可变与不可变的API分离，通过把他们放在不同的模块中： ``BloomFilter`` 用于不可变的代码，``BloomFilter.Mutable`` 用于可变代码。

另外，我们将创建一些辅助模块，这些模块不会在公开的API中出现，但它们可以让内部代码变得更清晰。

最后，我们让API的使用者提供用来产生多个哈希的函数。这个函数的类型是 ``a -> [Word32]`` 。我们将使用这个函数返回的全部哈希值，所以这个函数返回的列表不能为无穷的。

基本设计
------------------

跟前面介绍布隆过滤器实现原理时提到的数据结构一样，我们的 Haskell 版布隆过滤器也会用到一个位数组和一个能够计算出多个哈希值的函数。

::

    -- file: BloomFilter/Internal.hs
    module BloomFilter.Internal
        (
          Bloom(..)
        , MutBloom(..)
        ) where

    import Data.Array.ST (STUArray)
    import Data.Array.Unboxed (UArray)
    import Data.Word (Word32)

    data Bloom a = B {
          blmHash  :: (a -> [Word32])
        , blmArray :: UArray Word32 Bool
        }

因为 ``BloomFilter.Internal`` 模块纯粹是为了控制名称的可见性而存在的，所以在创建 Cabal 包时，我们将不会导出这个模块。我们把 ``BloomFilter.Internal`` 导入可变和不可变的模块中，但是我们会从各个模块中重新导出和模块 API 相关的类型。

拆箱，提升和bottom
^^^^^^^^^^^^^^^^^^^^^^^^

与其他 Haskell 的数组不同， ``UArray`` 包含未装箱的值。

对于一个常规的 Haskell 类型来说，它的值既可以是完全求值的（full evaluated），也可以是未求值的形式程序（thunk），又或者特殊值 ``⊥`` ，发音为（有时候也写作） "bottom"。值 ``⊥`` 是一个用来表示计算未成功的占位符。这里的计算可以有多种形式。它可能是一个无限循环，一个 ``error`` 应用，或者特殊值 ``undefined`` 。

一个可以包含bottom的类型被称为已提升的。所有常规Haskell类型都是已提升的。实际中，这意味着我们可以写 ``error "eek!"`` 或者 ``undefined`` 来代替常规表达式。

存储形式程序和 bottom 的能力会带来性能上的损耗：这种能力增加了额外的间接层。为了理解为什么我们需要这种间接，考虑 ``Word32`` 类型。这种类型的值是全 32 位宽的，所以在 32 位系统上，没有办法直接用 32 位来编码bottom。运行时系统不得不维护，并且检查一些额外的数据来跟踪这个值是不是 ``⊥`` 。

一个未装箱的值没有这种间接性。通过未装箱可以获得性能，但是牺牲了表示形式程序或者 bottom 的能力。因为未装箱的数组可以比常规 Haskell 的数组更加紧凑，所以这对于大量数据和位来说是一个非常好的选择。

.. info::

	装箱和提升

	与未装箱类型相对应的是使用了间接层的装箱类型。所有提升的值都是装箱的，但是一些底层的装箱类型并没有被提升。比如，GHC 的运行时系统有一个底层数组类型用于装箱（例如，它维护了一个数组的指针）。如果它是一个数组引用，那么它知道数组肯定是存在的，所以它不需要关心 bottom 是否存在。所以这个数组类型经过了装箱，但是却并未被提升。装箱但是未提升的类型仅展示了底层运行时的特殊实现（hacking）。在常规使用中我们不会遇到它们。

GHC 通过将 8 个数组元素组装成 1 个字节，实现了一种 Bool 类型的 UArray 数组，这种数组非常适合我们的需求。

ST monad
---------------------------

正如前面的 :ref:`modifying-array-elements` 部分所说，因为修改一个不可变数组需要对整个数组进行复制，所以这种修改的代价是非常高的。即使使用 ``UArray`` ，这一问题仍然会存在。那么我们如何才能将复制不可变数组的代价降低至我们可以承受的水平呢？

在指令式语言中，我们可以简单地原地修改数组元素，并且在 Haskell 里面也可以这样做。

Haskell 提供了一个特殊的 Monad，叫做 ``ST`` [59]_ *（State Transformer）* 。 ``ST`` 允许我们安全地工作在可变状态下。与 ``State`` Monad 相比，它有一些强大的额外的功能。

* 解冻一个不可变数组并得到一个可变数组，接着原地对可变数组进行修改，然后在修改完成之后冻结出一个新的不可变数组。
* 通过 *可变引用（mutable references）* 可以构建出一种数据结构，这种数据结构允许用户像命令式语言一样随时对其进行修改。对于那些尚未找到高效纯函数替代的命令式数据结构和算法来说，这个功能尤为重要。

``IO`` Monad 同样提供了这些功能。两者的主要区别在于， ``ST`` Monad 是为了让用户能够从 Monad 中回退到纯 Haskell 代码中而设计的。和大部分 Haskell Monad（当然除了 ``IO`` ）一样，我们通过执行函数 ``runST`` 进入 ``ST`` Monad，然后通过从 ``runST`` 中 return 来退出。

当我们应用一个 Monad 的执行函数的时候，我们希望它可以反复运行：如果给予相同的函数体（body）和参数，我们每次都能得到相同的结果。这同样可以应用于 ``runST`` 。为了达到这种可重复性（repeatablility），``ST`` Monad比 ``IO`` Monad 更加严格。我们不能读写文件，创建全局变量，或者创建线程。甚至，即使我们可以创建并且使用可变的引用和数组，类型系统也不允许它们逃逸到 ``runST`` 的调用方。在返回数据之前，可变数组必须被冻结（frozen）为不可变数组，并且可变引用不可以逃逸。

设计一个合格的输入API
------------------------

我们需要讨论一下用来处理布隆过滤器的公开接口。

::

  -- file: BloomFilter/Mutable.hs
  module BloomFilter.Mutable
      (
        MutBloom
      , elem
      , notElem
      , insert
      , length
      , new
      ) where

  import Control.Monad (liftM)
  import Control.Monad.ST (ST)
  import Data.Array.MArray (getBounds, newArray, readArray, writeArray)
  import Data.Word (Word32)
  import Prelude hiding (elem, length, notElem)

  import BloomFilter.Internal (MutBloom(..))

在我们导出的函数当中，有几个函数和 Prelude 导出的函数具有相同的名称。这么做是经过考虑的：我们希望用户使用限制名称导入我们的模块，这减轻了用户记忆的负担，因为他们对 Prelude 中的 ``elem`` ，``notElem`` 和 ``length`` 函数已经相当熟悉了。

在导入这种风格的模块时，我们通常会使用单个字母来作为前缀。例如，用户在代码中使用 ``import qualified BloomFilter.Mutable as M`` 导入模块，此时用户可以将导入模块中的 ``length`` 写为 ``M.length`` ，这保持了代码的紧凑型和可读性。

我们也可以不使用限制名称导入模块，但这样一来的话，我们就需要通过 ``import Prelude hiding (length)`` 来隐藏 Prelude 与模块相冲突的函数。我们不建议使用这种做法，因为它使读者容易忽视代码中的 ``length`` 并非 Prelude 模块的 ``length`` 。

当然，我们在上面定义的模块头中违背了这个规则：我们导入了 Prelude 并且隐藏了它的一些函数名。这是因为我们在模块中定义了自己的函数 ``length`` ，如果不先隐藏 Prelude 包中的同名函数，编译器将无法确定它该导出我们自定义的 ``length`` 还是 Prelude 中的 ``length`` 。

虽然导出完全限定名称 ``BloomFilter.Mutable.length`` 能够消除歧义，但它看起来更丑陋。这个决定对使用模块的用户没有影响，它仅仅针对我们自己 —— 黑盒的设计者，所以这里一般不会导致混淆。

创建一个可变的布隆过滤器
---------------------------

我们将可变布隆过滤器和不可变的 ``Bloom`` 类型均声明在 ``BloomFilter.Internal`` 模块中。

::

	-- file: BloomFilter/Internal.hs
	data MutBloom s a = MB {
		  mutHash :: (a -> [Word32])
		, mutArray :: STUArray s Word32 Bool
		}
		
``STUArray`` 类型提供了可以在 ``ST`` monad 中使用的可变数组，我们可以使用 ``newArray`` 函数创建一个 ``STUArray`` 。下面的 ``new`` 函数属于 ``BloomFilter.Mutable`` 模块（译注：此处应为 ``module`` ，原著中此处为 ``function`` ）。

::

	-- file: BloomFilter/Mutable.hs
	new :: (a -> [Word32]) -> Word32 -> ST s (MutBloom s a)
	new hash numBits = MB hash `liftM` newArray (0,numBits-1) False
	
``STUArray`` 的大多数方法实际上是 ``MArray`` 类型类的实现，这个类型类在 ``Data.Array.MArray`` 模块中定义。

有两个因素导致我们自己定义的 ``length`` 函数略显复杂：函数依赖于位数组对自己边界的记录，且 ``MArray`` 实例的 ``getBounds`` 函数有一个 monadic 类型。此外最终的结果还需要加 1，因为数组的上限比实际长度小 1。

布隆过滤器在添加元素时，需要将哈希函数计算出的所有位置位。 ``mod`` 函数确保了所有计算出的哈希值都限制在位数组范围之内，并将计算位数组偏移量的代码独立为一个函数。（译注：这里使用 ``mod`` 函数最好保证散列的范围是取模的倍数，否则使用 ``mod`` 会使散列结果倾向于某种概率分布。由于布隆过滤器和散列通常基于概率，因此应当避免概率分布过分偏离平均）

::

	-- file: BloomFilter/Mutable.hs
	insert :: MutBloom s a -> a -> ST s ()
	insert filt elt = indices filt elt >>=
					  mapM_ (\bit -> writeArray (mutArray filt) bit True)

	indices :: MutBloom s a -> a -> ST s [Word32]
	indices filt elt = do
	  modulus <- length filt
	  return $ map (`mod` modulus) (mutHash filt elt)
	  
判断一个元素是否属于布隆过滤器的成员非常简单：如果根据元素计算出的哈希值对应的每一位都已经被置位，则可以认为这个元素已经位于布隆过滤器中。

::

	-- file: BloomFilter/Mutable.hs
	elem, notElem :: a -> MutBloom s a -> ST s Bool

	elem elt filt = indices filt elt >>=
					allM (readArray (mutArray filt))

	notElem elt filt = not `liftM` elem elt filt

我们需要再编写一个简单的支持函数：monadic 版本的 ``all`` ，这里将其命名为 ``allM`` 。

::
	
	-- file: BloomFilter/Mutable.hs
	allM :: Monad m => (a -> m Bool) -> [a] -> m Bool
	allM p (x:xs) = do
	  ok <- p x
	  if ok
		then allM p xs
		else return False
	allM _ [] = return True
	
不可变的 API
----------------

我们为可变布隆过滤器保留的接口与不可变布隆过滤器的 API 拥有相同的结构：

::

	-- file: ch26/BloomFilter.hs
	module BloomFilter
		(
		  Bloom
		, length
		, elem
		, notElem
		, fromList
		) where

	import BloomFilter.Internal
	import BloomFilter.Mutable (insert, new)
	import Data.Array.ST (runSTUArray)
	import Data.Array.IArray ((!), bounds)
	import Data.Word (Word32)
	import Prelude hiding (elem, length, notElem)

	length :: Bloom a -> Int
	length = fromIntegral . len

	len :: Bloom a -> Word32
	len = succ . snd . bounds . blmArray

	elem :: a -> Bloom a -> Bool
	elt `elem` filt   = all test (blmHash filt elt)
	  where test hash = blmArray filt ! (hash `mod` len filt)

	notElem :: a -> Bloom a -> Bool
	elt `notElem` filt = not (elt `elem` filt)

我们还提供了一个易于使用的方法，用户可以通过 ``fromList`` 函数创建不可变的布隆过滤器。这个函数对用户隐藏了 ``ST`` monad，因此他们只能看到不可变类型。

::

	-- file: ch26/BloomFilter.hs
	fromList :: (a -> [Word32])    -- family of hash functions to use
			 -> Word32             -- number of bits in filter
			 -> [a]                -- values to populate with
			 -> Bloom a
	fromList hash numBits values =
		B hash . runSTUArray $
		  do mb <- new hash numBits
			 mapM_ (insert mb) values
			 return (mutArray mb)
			 
[Forec 译注：上面的代码在 **GHC** 7.x 中无法通过编译，可以作如下修改来通过编译。

::
	
	fromList hash numBits values =
		(B hash . runSTUArray) (new hash numBits >>= \mb -> do
		mapM_ (insert mb) values
		return (mutArray mb))

]
			 
``fromList`` 函数的关键在于 ``runSTUArray`` 。前面提过，为了从 ``ST`` monad 返回一个不可变数组，我们必须冻结一个可变数组，而 ``runSTUArray`` 函数将执行和冻结相结合。给定一个返回 ``STUArray`` 的动作， ``runSTUArray`` 会使用 ``runST`` 执行这个动作，之后冻结返回的 ``STUArray`` 并将结果作为 ``UArray`` 返回。

``MArray`` 类型类同样提供了一个可用的冻结函数，不过 ``runSTUArray`` 更方便，也更有效。这是因为冻结必须将底层数据从 ``STUArray`` 复制到新的 ``UArray`` 以确保对 ``STUArray`` 的后续修改不会影响 ``UArray`` 。因为类型系统的存在， ``runSTUArray`` 可以在创建 ``UArray`` 的同时保证 ``STUArray`` 不能被访问。因此 ``runSTUArray`` 无需复制也可以共享两个数组之间的底层内容。

创建友好的接口
------------------

在创建了布隆过滤器之后，我们就可以直接使用上面提到的不可变布隆过滤器 API 。需要注意的是， ``fromList`` 函数还遗留了一些重要的决策没有完成。我们仍然要选择一个合适的哈希函数，并确定布隆过滤器的容量。

::

	-- file: BloomFilter/Easy.hs
	easyList :: (Hashable a)
			 => Double        -- false positive rate (between 0 and 1)
			 -> [a]           -- values to populate the filter with
			 -> Either String (B.Bloom a)

这里有一种更 “友好” 的方式创建布隆过滤器：这种方式将计算哈希值的任务交给了 ``Hashable`` 类型类，并且允许我们将可容忍的错误率作为参数配置布隆过滤器。它还可以根据容错率和输入列表中的元素数量为我们自动选择合适的过滤器大小。

当然，这种方式不是始终可用的。例如，它可能在输入列表的长度过长时失败。但是这种方法的简便性比起我们之前提供的其他接口都要更胜一筹：它使得接口的用户能够对布隆过滤器的整个创建过程进行一系列控制，并将原来彻头彻尾的命令式接口变成了完完全全的声明式接口。

导出更方便的名称
^^^^^^^^^^^^^^^^^^^^

在模块的导出列表中，我们从基本的 ``BloomFilter`` 模块中重新导出了一些名称。这允许临时用户只导入 ``BloomFilter.Easy`` 模块，并访问他们可能需要的所有类型和功能。

你可能会好奇，同时导入一个被 ``BloomFilter.Easy`` 和 ``BloomFilter`` 二者均导出的名称会带来什么后果。我们知道，如果不使用 ``qualified`` 导入 ``BloomFilter`` 并调用 ``length`` 函数，GHC 会发出一个有关歧义的错误，因为 ``Prelude`` 中也包含一个同名函数。

Haskell 标准的实现要能够分辨出指向同一个 “事物” 的多个不同名称。例如， ``BloomFilter`` 和 ``BloomFilter.Easy`` 均导出了 ``Bloom`` 类型，如果我们同时导入了这两个模块并使用 ``Bloom`` ，GHC 将能够发现这两个模块导出的 ``Bloom`` 相同，并且不会报告歧义。

哈希值
^^^^^^^

一个布隆过滤器的性能取决于快速、高质量的哈希函数，然而编写一个兼具这两种属性的哈希函数非常困难。

幸运的是，一个名为 Bob Jenkins 的开发人员编写了一些具有这些属性的哈希函数，并公开了代码（网址为 http://burtleburtle.net/bob/hash/doobs.html [59]_）。这些哈希函数使用 C 语言编写，可以通过 FFI 创建它们的绑定。在该网站上，我们需要的特定源文件名为 ``lookup3.c`` ，在本地创建一个 ``cbits`` 目录并将这个文件下载到该目录。

.. info::

	稍作编辑
	
	在刚刚下载的 ``lookup3.c`` 的第 36 行，有一个名为 ``SELF_TEST`` 的宏定义。要将这个源文件作为库使用必须将此行注释掉。如果你没有注释掉这部分代码，文件底部定义的主函数会取代任何试图链接这个库的 Haskell 程序。

还剩下最后一个难题没有解决：我们可能经常需要七个、十个，甚至更多个散列函数，但又不想把这些不同功能的哈希函数混杂到一起。幸运的是，在实际应用中我们多数情况下只需要两个哈希函数，下面很快就会讲到如何实现。Jenkins 的散列库包含两个函数 ``hashword2`` 和 ``hashlittle2`` ，它们计算两个哈希值。这里有一个 C 语言的头文件，它描述了这两个函数的 API，我们将它保存为 ``cbits/lookup3.h`` 。

::

	/* save this file as lookup3.h */

	#ifndef _lookup3_h
	#define _lookup3_h

	#include <stdint.h>
	#include <sys/types.h>

	/* only accepts uint32_t aligned arrays of uint32_t */
	void hashword2(const uint32_t *key,  /* array of uint32_t */
			   size_t length,	     /* number of uint32_t values */
			   uint32_t *pc,	     /* in: seed1, out: hash1 */
			   uint32_t *pb);	     /* in: seed2, out: hash2 */

	/* handles arbitrarily aligned arrays of bytes */
	void hashlittle2(const void *key,   /* array of bytes */
			 size_t length,     /* number of bytes */
			 uint32_t *pc,      /* in: seed1, out: hash1 */
			 uint32_t *pb);     /* in: seed2, out: hash2 */

	#endif /* _lookup3_h */
	
“盐” 是在计算哈希值时加入的干扰值。如果我们用某哈希函数求一个值的散列，并分别加入两个不同的盐，那么将会计算出两个不同的结果。因为即使是同一个哈希函数，接收了两个不同的盐值后，计算结果也会相去甚远。
	
下面的代码是对这两个函数的绑定：

::

	-- file: BloomFilter/Hash.hs
	{-# LANGUAGE BangPatterns, ForeignFunctionInterface #-}
	module BloomFilter.Hash
		(
		  Hashable(..)
		, hash
		, doubleHash
		) where

	import Data.Bits ((.&.), shiftR)
	import Foreign.Marshal.Array (withArrayLen)
	import Control.Monad (foldM)
	import Data.Word (Word32, Word64)
	import Foreign.C.Types (CSize)
	import Foreign.Marshal.Utils (with)
	import Foreign.Ptr (Ptr, castPtr, plusPtr)
	import Foreign.Storable (Storable, peek, sizeOf)
	import qualified Data.ByteString as Strict
	import qualified Data.ByteString.Lazy as Lazy
	import System.IO.Unsafe (unsafePerformIO)

	foreign import ccall unsafe "lookup3.h hashword2" hashWord2
		:: Ptr Word32 -> CSize -> Ptr Word32 -> Ptr Word32 -> IO ()

	foreign import ccall unsafe "lookup3.h hashlittle2" hashLittle2
		:: Ptr a -> CSize -> Ptr Word32 -> Ptr Word32 -> IO ()
		
[Forec 译注：上面的代码在 **GHC** 7.6 后无法通过编译，解决方法是将 ``import Foreign.C.Types (CSize)`` 修改为 ``import Foreign.C.Types (CSize(..))`` 或者 ``import Foreign.C.Types (CSize(CSize))`` 。]

函数的定义可以查看我们刚刚创建的 ``lookup3.h`` 。

出于对效率和便捷的考虑，我们将 Jenkins 散列函数所需的 32 位盐值和计算出的散列值组成单个 64 位值：

::

	-- file: BloomFilter/Hash.hs
	hashIO :: Ptr a    -- value to hash
		   -> CSize    -- number of bytes
		   -> Word64   -- salt
		   -> IO Word64
	hashIO ptr bytes salt =
		with (fromIntegral salt) $ \sp -> do
		  let p1 = castPtr sp
			  p2 = castPtr sp `plusPtr` 4
		  go p1 p2
		  peek sp
	  where go p1 p2
			  | bytes .&. 3 == 0 = hashWord2 (castPtr ptr) words p1 p2
			  | otherwise        = hashLittle2 ptr bytes p1 p2
			words = bytes `div` 4
	
[Forec 译注： ``with`` 在下面的段落中会有解释， ``castPtr`` 没有介绍过，你可以在 
http://hackage.haskell.org/package/base-4.6.0.1/docs/Foreign-Marshal-Utils.html#v:with 查看 ``with`` 的文档，在 
http://hackage.haskell.org/package/base-4.6.0.1/docs/Foreign-Ptr.html#v:castPtr 查看 ``castPtr`` 的文档。此外，这里使用 ``castPtr`` 并对 ``p1`` 和 ``p2`` 使用类型推断虽然简短了代码，但也降低了代码的可读性。]
	
上面的代码如果没有明确的类型来描述其功能，那么可能看起来就不是很清晰。 ``with`` 函数在 C 程序的堆栈段中为盐值分配了空间，并存储了当前的盐值，所以 ``sp`` 的类型是 ``Ptr Word64`` 。指针 ``p1`` 和 ``p2`` 的类型是 ``Ptr Word32`` ； ``p1`` 指向了 ``sp`` 的低位字， ``p2`` 指向了 ``sp`` 的高位字。这就是我们将一个 ``Word64`` 的盐值切分为两个 ``Ptr Word32`` 参数的方法。

因为所有的数据指针均来自 Haskell 堆，所以它们会在一个能够安全传递给 ``hashWord2`` （只接受 32 位对齐地址）或者 ``hashLittle2`` 的地址上对齐。由于 ``hashWord2`` 是两个哈希函数中较快的，所以我们会在数据为 4 字节的倍数时调用 ``hashWord2`` ，否则调用 ``hashLittle2`` 。 [Forec 译注：这里原著拼写错误，将 ``hashWord2`` 误拼写为 ``hashWord32`` ]

C 语言编写的哈希函数会将计算出的哈希值写入 ``p1`` 和 ``p2`` 指向的地址，我们可以通过 ``sp`` 直接检索计算结果。

使用这个模块的客户不应当被低级细节困扰，所以我们通过类型类来提供一个干净、高级的接口：

::

	-- file: BloomFilter/Hash.hs
	class Hashable a where
		hashSalt :: Word64        -- ^ salt
				 -> a             -- ^ value to hash
				 -> Word64

	hash :: Hashable a => a -> Word64
	hash = hashSalt 0x106fc397cf62f64d3
	
我们还为这个类型类提供了一些实用的实现。要计算基本类型的哈希值，必须先编写一点样板代码：

::

	-- file: BloomFilter/Hash.hs
	hashStorable :: Storable a => Word64 -> a -> Word64
	hashStorable salt k = unsafePerformIO . with k $ \ptr ->
						  hashIO ptr (fromIntegral (sizeOf k)) salt

	instance Hashable Char   where hashSalt = hashStorable
	instance Hashable Int    where hashSalt = hashStorable
	instance Hashable Double where hashSalt = hashStorable
	
下面的代码使用 ``Storable`` 类型类将声明减少到一个：

::

	-- file: BloomFilter/Hash.hs
	instance Storable a => Hashable a where
		hashSalt = hashStorable

[Forec 译注：上面使用 ``Storable`` 的代码需要添加 ``{-# LANGUAGE FlexibleInstances #-}`` 和 ``{-# LANGUAGE UndecidableInstances #-}`` 两个编译选项后才能通过编译。 ]

不幸的是，Haskell 不允许编写这种形式的实例，因为它们会使类型系统无法判定：编译器的类型检查器可能会陷入无限循环中。对不可确定类型的限制使我们必须单独列出声明，但它对于上面的定义并不会造成什么影响。[Forec 译注：上面的例子中如果存在 ``instance Hashable a => Storable a`` 这样的代码（虽然这样的代码没什么意义），则编译器会陷入循环。但如果程序开发者能够保证这种情况不会发生，则可以开启编译选项并使用这一扩展功能。]

::

	-- file: BloomFilter/Hash.hs
	hashList :: (Storable a) => Word64 -> [a] -> IO Word64
	hashList salt xs =
		withArrayLen xs $ \len ptr ->
		  hashIO ptr (fromIntegral (len * sizeOf x)) salt
	  where x = head xs

	instance (Storable a) => Hashable [a] where
		hashSalt salt xs = unsafePerformIO $ hashList salt xs
		
编译器会接受这个实例，因而我们能够对多种列表类型计算哈希值 [60]_ 。最重要的是，由于 ``Char`` 是 ``Storable`` 的一个实例，所以 ``String`` 类型的哈希值同样可以被计算。

利用函数组合可以计算元组的哈希值：在组合管道的一端取盐，并将元组中每个元素的散列结果作为计算该元组中下一个元素使用的盐值。

::

	-- file: BloomFilter/Hash.hs
	hash2 :: (Hashable a) => a -> Word64 -> Word64
	hash2 k salt = hashSalt salt k

	instance (Hashable a, Hashable b) => Hashable (a,b) where
		hashSalt salt (a,b) = hash2 b . hash2 a $ salt

	instance (Hashable a, Hashable b, Hashable c) => Hashable (a,b,c) where
		hashSalt salt (a,b,c) = hash2 c . hash2 b . hash2 a $ salt

要计算 ``ByteString`` 类型的哈希值，我们可以编写一个直接插入到 ``ByteString`` 类型内部的特殊实例，其效率非常出色：

::

	-- file: BloomFilter/Hash.hs
	hashByteString :: Word64 -> Strict.ByteString -> IO Word64
	hashByteString salt bs = Strict.useAsCStringLen bs $ \(ptr, len) ->
							 hashIO ptr (fromIntegral len) salt

	instance Hashable Strict.ByteString where
		hashSalt salt bs = unsafePerformIO $ hashByteString salt bs

	rechunk :: Lazy.ByteString -> [Strict.ByteString]
	rechunk s
		| Lazy.null s = []
		| otherwise   = let (pre,suf) = Lazy.splitAt chunkSize s
						in  repack pre : rechunk suf
		where repack    = Strict.concat . Lazy.toChunks
			  chunkSize = 64 * 1024

	instance Hashable Lazy.ByteString where
		hashSalt salt bs = unsafePerformIO $
						   foldM hashByteString salt (rechunk bs)
		
由于惰性的 ``ByteString`` 类型是由一系列块表示的，我们必须留意块之间的边界。举个例子，字符串 ``foobar`` 可以通过五种不同方式表示，如 ``["foob", "ar"]`` 或者 ``["fo", "obar"]`` 。这一点对于多数用户不可见，但我们直接使用了底层的块。 ``rechunck`` 函数能够确保传递给 C 语言代码的块大小统一为 64 KB，所以无论原始边界在哪里，计算出的哈希值都是一致的。

将两个哈希值转换为多个
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

正如前面所述，我们需要两个以上的哈希函数才能有效地使用布隆过滤器。双重哈希技术能够组合 Jenkins 哈希函数计算出的两个值，并产生更多的哈希值。使用双重哈希技术产生的多个哈希值足够满足我们的需要，并且比计算多个不同的哈希值更容易。

::

	-- file: BloomFilter/Hash.hs
	doubleHash :: Hashable a => Int -> a -> [Word32]
	doubleHash numHashes value = [h1 + h2 * i | i <- [0..num]]
		where h   = hashSalt 0x9150a946c4a8966e value
			  h1  = fromIntegral (h `shiftR` 32) .&. maxBound
			  h2  = fromIntegral h
			  num = fromIntegral numHashes
			  
[Forec 译注：上面代码中的 ``maxBound`` 可以通过在 GHCI 中执行 ``maxBound::Word32`` 查看，结果为 4294967295。]

实现简单的创建函数
^^^^^^^^^^^^^^^^^^^^^^^

在 ``BloomFilter.Easy`` 模块中，我们使用新的 ``doubleHash`` 函数来定义之前已经定义过类型的 ``easyList`` 函数。

::

	-- file: BloomFilter/Easy.hs
	module BloomFilter.Easy
		(
		  suggestSizing
		, sizings
		, easyList

		-- re-export useful names from BloomFilter
		, B.Bloom
		, B.length
		, B.elem
		, B.notElem
		) where

	import BloomFilter.Hash (Hashable, doubleHash)
	import Data.List (genericLength)
	import Data.Maybe (catMaybes)
	import Data.Word (Word32)
	import qualified BloomFilter as B

	easyList errRate values =
		case suggestSizing (genericLength values) errRate of
		  Left err            -> Left err
		  Right (bits,hashes) -> Right filt
			where filt = B.fromList (doubleHash hashes) bits values
			
上面的代码依赖于一个 ``suggestSizing`` 函数，这个函数能够根据用户要求的错误率和期望滤波器包含元素的最大数量来估计滤波器的大小以及要计算的哈希值数量：

::

	-- file: BloomFilter/Easy.hs
	suggestSizing
		:: Integer       -- expected maximum capacity
		-> Double        -- desired false positive rate
		-> Either String (Word32,Int) -- (filter size, number of hashes)
	suggestSizing capacity errRate
		| capacity <= 0                = Left "capacity too small"
		| errRate <= 0 || errRate >= 1 = Left "invalid error rate"
		| null saneSizes               = Left "capacity too large"
		| otherwise                    = Right (minimum saneSizes)
	  where saneSizes = catMaybes . map sanitize $ sizings capacity errRate
			sanitize (bits,hashes)
			  | bits > maxWord32 - 1 = Nothing
			  | otherwise            = Just (ceiling bits, truncate hashes)
			  where maxWord32 = fromIntegral (maxBound :: Word32)

	sizings :: Integer -> Double -> [(Double, Double)]
	sizings capacity errRate =
		[(((-k) * cap / log (1 - (errRate ** (1 / k)))), k) | k <- [1..50]]
	  where cap = fromIntegral capacity

[Forec 译注：关于上面代码中 ``errRate`` 的推导，可以参考维基百科上布隆过滤器的词条 http://en.wikipedia.org/wiki/Bloom_filter 。根据维基百科，有式 ``errRate = (1-e^(-k*cap/size))^k`` ，因为 ``suggestSizing`` 函数接受 ``k`` 、 ``cap`` 和 ``errRate`` ，我们可以重新整理方程，并得到 ``size = -k*cap/log(1 - errRate^(1/k))`` ，这就是代码中使用的公式。]
	  
我们对参数做了一定的规范。例如， ``sizings`` 函数虽然受到数组大小和哈希值数量的影响，但它并不验证这两个值。由于使用了 32 位哈希值，我们必须过滤掉太大的数组。

在 ``suggestSizing`` 函数中，我们仅仅尝试最小化位数组的大小，而不考虑哈希值的数量。现在让我们通过 GHCI 交互地探索一下数组大小和哈希值数量的关系，并解释这种做法的缘由：

假设要将一千万个元素插入布隆过滤器中，并希望误报率不超过 0.1 %。

::

	ghci> let kbytes (bits,hashes) = (ceiling bits `div` 8192, hashes)
	ghci> :m +BloomFilter.Easy Data.List
	Could not find module `BloomFilter.Easy':
	  Use -v to see a list of the files searched for.
	ghci> mapM_ (print . kbytes) . take 10 . sort $ sizings 10000000 0.001

	(17550,10.0)
	(17601,11.0)
	(17608,9.0)
	(17727,12.0)
	(17831,8.0)
	(17905,13.0)
	(18122,14.0)
	(18320,7.0)
	(18368,15.0)
	(18635,16.0)

[Forec 译注：上面交互式代码在原著中是有误的，原著没有纠正这一错误，上面的结果由译者修改后计算。要想得到上面的结果，可以参考如下步骤：

::

	$ cd cbits
	$ gcc -c -fPIC lookup3.c -o lookup3.o
	$ gcc -shared -Wl,-soname,liblookup3.so.1 -o liblookup3.so.1.0.1 lookup3.o
	$ ln -s liblookup3.so.1.0.1 liblookup3.so
	$ cd ..
	$ ghci -L./cbits -llookup3
	Prelude> :l BloomFilter.Easy
	*BloomFilter.Easy> :m +Data.List
	*BloomFilter.Easy Data.List> let kb (bits,hashes) = (ceiling bits `div` 8192, hashes)
	*BloomFilter.Easy Data.List> mapM_ (print . kb) . take 10 . sort $ sizings 10000000 0.001
	Loading package array-0.4.0.0 ... linking ... done.
	Loading package bytestring-0.9.2.1 ... linking ... done.
	(17550,10.0)
	(17601,11.0)
	(17608,9.0)
	(17727,12.0)
	(17831,8.0)
	(17905,13.0)
	(18122,14.0)
	(18320,7.0)
	(18368,15.0)
	(18635,16.0)

]
	
通过计算 10 个哈希值，我们得到了一个非常紧凑的表（刚好超过 17 KB）。如果真的对数据进行反复的散列，则哈希值的数量可以减少到 7 个，空间消耗可以减少到 5%。因为 Jenkins 的哈希函数在一轮计算中得到两个哈希值，并通过双重哈希产生额外的哈希值，因此我们计算额外哈希值的成本非常小，所以选择最小的表大小。	

如果将最高可容忍误报率增加十倍，变为 1%，则所需的空间和哈希值数量都会下降，尽管下降的幅度不太容易预测。

::

	ghci> mapM_ (print . kbytes) . take 10 . sort $ sizings 10000000 0.01
	(11710,7.0)
	(11739,6.0)
	(11818,8.0)
	(12006,9.0)
	(12022,5.0)
	(12245,10.0)
	(12517,11.0)
	(12810,12.0)
	(12845,4.0)
	(13118,13.0)

[Forec 译注：上面的代码在原著中同样有误，计算结果由译者修改后给出，步骤同上。]
	

创建一个 Cabal 包
-----------------

至此我们已经创建了一个不算太复杂的库，它包括四个公共模块和一个内部模块。现在创建一个 ``rwh-bloomfilter.cabal`` 文件，将这个库打包成容易发布的格式。

Cabal 允许我们在一个包中描述几个库的信息。 ``.cabal`` 文件的头部包含了所有库通用的信息，后面跟着各个库不同的部分。

::

	Name:               rwh-bloomfilter
	Version:            0.1
	License:            BSD3
	License-File:       License.txt
	Category:           Data
	Stability:          experimental
	Build-Type:         Simple

由于 C 语言代码 ``lookup3.c`` 和库捆绑在一起，所以我们要将这个 C 语言源文件的信息告知 Cabal。

::

	Extra-Source-Files: cbits/lookup3.c cbits/lookup3.h
	
``Extra-Source-Files`` 指令对包的构建没有影响：它仅仅在我们运行 ``runhaskell Setup sdist`` 时指导 Cabal 绑定一些额外的文件，这条指令将创建一个用于发布的源码包。

..info::

	属性名称不区分大小写
	
	Cabal 在读取属性（ ':' 字符前面的文本）时会忽略大小写，因此 ``extra-source-files`` 和 ``Extra-Source-Files`` 是等价的。

处理不同的构建设置
^^^^^^^^^^^^^^^^^^

在 2007 年以前，Haskell 标准库被组织在少数几个规模较大的包中，其中最大的一个被命名为 ``base`` 。这个包将许多互不相关的库绑定到一起，因此 Haskell 社区将 ``base`` 包拆分成了几个模块化程度更高的库。

Cabal 包需要指明自己构建时依赖的其它包，这些信息帮助 Cabal 的命令行接口在必要的情况下自动下载并构建包的依赖。我们希望，不管用户使用的 GHC 版本是否具备 ``base`` 和其它包的现代布局，我们的代码都能尽量兼容。举个例子，我们的代码要能够在 ``array`` 包存在的时候说明自己依赖它，否则就只能依赖 ``base`` 包。

Cabal 提供了一个通用的配置功能，它允许我们选择性地启用一个 ``.cabal`` 文件的某些部分。构建的配置信息由布尔类型的标识控制，标识为 ``True`` 时使用 ``if flag`` 指令后面的文本，否则使用对应 ``else`` 指令后的内容。

::

	Cabal-Version:      >= 1.2

	Flag split-base
	  Description: Has the base package been split up?
	  Default: True

	Flag bytestring-in-base
	  Description: Is ByteString in the base or bytestring package?
	  Default: False

* 配置功能在 Cabal 的 1.2 版本中引入，因此指定 Cabal 版本不能低于 1.2。
* ``split-base`` 标识的含义不言而喻。[Forec 译注：该标识表示 ``base`` 包是否被划分]
* ``bytestring-in-base`` 标识源于一段更为曲折的历史：``bytestring`` 包在创建之初是和 GHC 6.4 捆绑的，并且它始终独立于 ``base`` 包；在 GHC 6.6 中，它被合并到了 ``base`` 包中；到了 GHC 6.8.1 版本，它又再次被独立出去。
* 上面这些标识对构建包的开发者来说通常是不可见的，因为 Cabal 会自动处理它们。在我们进行下一步分析前，了解它们能够帮助理解 ``.cabal`` 文件中 ``Library`` 部分开头的内容。

::

	Library
	  if flag(bytestring-in-base)
		-- bytestring was in base-2.0 and 2.1.1
		Build-Depends: base >= 2.0 && < 2.2
	  else
		-- in base 1.0 and 3.0, bytestring is a separate package
		Build-Depends: base < 2.0 || >= 3, bytestring >= 0.9

	  if flag(split-base)
		Build-Depends: base >= 3.0, array
	  else
		Build-Depends: base < 3.0

Cabal 使用标志的默认值（缺省的默认值是 True）创建包的描述信息。如果当前的配置能够构建成功（比如所有需要的包版本都可用）则这个配置将被采用，否则 Cabal 将尝试多种方式组合标识，直到它寻找到一个能够构建成功的配置，或者所有备选的配置都无法生效为止。

例如，如果我们将 ``split-base`` 和 ``bytestring-in-base`` 设置为 ``True``，Cabal 会选择以下的包依赖项：

::

	Build-Depends: base >= 2.0 && < 2.2
	Build-Depends: base >= 3.0, array
	
``base`` 包的版本无法同时又高于 3.0 又低于 2.2，所以 Cabal 出于一致性考虑会拒绝这个配置。对于现代版本的 GHC，在几次尝试后，它将产生如下配置：

::

	-- in base 1.0 and 3.0, bytestring is a separate package
	Build-Depends: base < 2.0 || >= 3, bytestring >= 0.9
	Build-Depends: base >= 3.0, array

在运行 ``runhaskell Setup configure`` 时，我们可以使用 ``--flag`` 选项手动指定各标识的值，虽然实际中很少需要这么做。


编译选项和针对 C 的接口
^^^^^^^^^^^^^^^^^^^^^^^

下面让我们继续分析 ``.cabal`` 文件，并完成与 Haskell 相关的剩余细节。如果在构建过程中启用分析，我们希望所有的顶级函数都显示在分析的输出中。

::

	GHC-Prof-Options: -auto-all
	
``Other-Modules`` 属性列出了库中私有的 Haskell 模块，这些模块对使用此包的代码不可见。

在 GHC 构建这个包时，Cabal 会将 ``GHC-Options`` 属性中的选项传递给编译器。

``-O2`` 选项使 GHC 尽可能地优化我们的代码。不加以优化编译出的代码效率很低，所以在编译生产代码时应当始终使用 ``-O2`` 选项。

为了写出更清晰的代码，我们通常添加 ``-Wall`` 选项，这个选项会启用 GHC 的所有警告。这将导致 GHC 在遇到潜在问题（例如重叠的模式匹配、未使用的函数参数等其它潜在障碍）时提出警告。尽管忽略这些警告一般是安全的，但我们应该尽量完善代码以消除它们。这一点小小的努力，将催生更容易阅读和维护的代码。

普通情况下 GHC 会直接生成汇编语言代码，而在使用 ``-fvia-C`` 编译时，GHC 会生成 C 语言代码并使用系统的 C 编译器来编译它。这会减慢编译速度，但有时 C 编译器能够进一步改善 GHC 优化的代码，所以这也是值得的。

我们这里提到 ``-fiva-C`` 主要是为了展示如何使用它编译。

::

	C-Sources:        cbits/lookup3.c  
	CC-Options:       -O3
	Include-Dirs:     cbits
	Includes:         lookup3.h
	Install-Includes: lookup3.h

对于 ``C-Sources`` 属性，我们只需要列出必须编译到库中的文件。``CC-Options`` 包括 C 编译器的选项（``-O3`` 指定高级优化）。因为对 Jenkins 散列函数的 FFI 绑定引用了 ``lookup3.h`` 头文件，我们需要告诉 Cabal 在哪里可以找到该头文件。``Install-Includes`` 用来告诉 Cabal 安装这个头文件，否则在构建时客户端代码将无法找到头文件。

..info::

	``-fvia-C`` 在 FFI 中的价值

	在编写 FFI 绑定时，``-fvia-C`` 编译选项能够提升安全性。如果在 FFI 声明中提到头文件（如外部导入 ``string.h memcpy``），那么 C 编译器会对生成的 Haskell 代码做类型检查，以确保其 C 函数的调用和头文件中的函数原型一致。
	
	如果不使用 ``-fvia-C`` ，我们将失去一层额外的安全保障：C 类型错误很容易混入我们的 Haskell 代码中。举个例子，在多数 64 位机器上，``CInt`` 是 32 位宽，而 ``CSize`` 是 64 位宽。如果我们不小心弄混了用来描述 FFI 绑定参数的类型，那么数据可能会损毁。

[Forec 译注：遗憾的是，在较新版本的 GHC 中 ``-fvia-C`` 不会产生任何作用，并且它将在未来的 GHC 发布中被移除。所以本节关于 ``-fvia-C`` 选项的介绍已经成为历史了。]

用 QuickCheck 测试
------------------

在进一步考虑性能之前，我们要确保布隆过滤器的正确性。使用 QuickCheck 可以轻松测试一些基本的属性。

::

	-- file: examples/BloomCheck.hs
	{-# LANGUAGE GeneralizedNewtypeDeriving #-}
	module Main where

	import BloomFilter.Hash (Hashable)
	import Data.Word (Word8, Word32)
	import System.Random (Random(..), RandomGen)
	import Test.QuickCheck
	import qualified BloomFilter.Easy as B
	import qualified Data.ByteString as Strict
	import qualified Data.ByteString.Lazy as Lazy

普通的 ``quickCheck`` 函数对布隆过滤器属性的测试帮助不大，因为它产生的 100 个测试输入样例无法完整覆盖布隆过滤器的功能。这里我们编写自己的测试函数：

::

	-- file: examples/BloomCheck.hs
	handyCheck :: Testable a => Int -> a -> IO ()
	handyCheck limit = check defaultConfig {
						 configMaxTest = limit
					   , configEvery   = \_ _ -> ""
					   }
	
[Forec 译注：在较新版本的 QuickCheck 中，上面的代码应该写成：

::
	
	handyCheck :: Testable a => Int -> a -> IO ()
	handyCheck limit = quickCheckWith (stdArgs { maxSuccess = limit )

]

下面我们要完成的第一个任务是确保：无论用户选择多大的容错率，只要向布隆过滤器添加了一个任意值，则之后针对该值的成员测试都应得到 “值已存在” 的结果。

我们将使用 ``easyList`` 函数来创建一个布隆过滤器。 ``Double`` 的 ``Random`` 实例能够生成 0 到 1 之间的随机数，因此 QuickCheck 可以提供任意大小的错误率。

然而，测试生成的错误率应当排除 0 和 1。QuickCheck 提供了两种方法：

* 通过结构：指定要生成的有效值的范围。QuickCheck 为此提供了 ``forAll`` 组合器。
* 通过过滤：当 QuickCheck 生成一个任意值时，用 ``(=~>)`` 运算符过滤掉不符合标准的值。如果布隆过滤器通过这种方式拒绝一个输入值，测试将显示成功。

如果以上两个方法都可以选择，那么最好采用通过结构的方法：假设 QuickCheck 生成了 1000 个任意值，其中 800 个由于某些原因被过滤掉。看起来我们似乎运行了 1000 次测试，但实际上只有 200 次做了有意义的事。

出于这个原因，当需要产生错误率时，我们不会去消除 QuickCheck 提供的 0 或 1，而是在一个始终有效的区间中构造值：

::

	falsePositive :: Gen Double
	falsePositive = choose (epsilon, 1 - epsilon)
		where epsilon = 1e-6

	(=~>) :: Either a b -> (b -> Bool) -> Bool
	k =~> f = either (const True) f k

	prop_one_present _ elt =
		forAll falsePositive $ \errRate ->
		  B.easyList errRate [elt] =~> \filt ->
			elt `B.elem` filt

[Forec 译注：原著作者似乎在这里犯了一点错误，根据代码， ``prop_one_present`` 的型别声明应为 ``(Hashable a) => t -> a -> Property`` ，但这无法通过编译，因为 ``prop_one_present`` 的第一个参数 ``_`` 隐藏着对类型 ``t`` 和 ``a`` 的约束，它们二者必须相等。有两种解决方法：一是不指定这个多余的 ``_`` 参数，二是将型别声明显式地指定为 ``(Hashable a) => a -> a -> Property`` 。]

组合器 ``(=~>)`` 过滤了 ``easyList`` 失败的情况：如果失败了，测试会自动通过。

多态测试
^^^^^^^^

为 ByteString 编写任意实例
^^^^^^^^^^^^^^^^^^^^^^^^^^

推荐大小是正确的吗？
^^^^^^^^^^^^^^^^^^^

性能分析和调优
--------------

配置驱动的性能调优
^^^^^^^^^^^^^^^^^^

练习
----


.. [Broder02] Andrei Broder. Michael Mitzenmacher. “Network applications of Bloom filters: a survey”. Internet Mathematics. 1. 4. 2005. 485-509. A K Peters Ltd..
.. [59] ``ST`` 是 “状态变换器” （state transformer） 的缩写。
.. [60] Jenkins 的哈希函数相比一些流行的非加密哈希函数（如 FNV 和 hashpjw）具有好的多的混合属性，因此我们建议避免使用那些非加密哈希函数。