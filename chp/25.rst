第二十五章：性能分析与优化
==========================

Haskell 是高级编程语言。一个真正的高级编程语言。我们可以整天整天地全部用
抽象概念、幺半群、函子、以及hylomorphisms来编程，远非任何针对特定硬件模型
的计算。这个语言的标准规范极力避免照症开药。这几层抽象使得我们可以把
Haskell 作为计算本身的记号，让编程人员关心他们问题的关键点，而不用操心
低层次的实现细节。人们得以以纯净的想法编程。

然而，我们本书讲的真实情况下的编程，而真实情况下代码运行在有限资源的硬件上。
我们的程序将有时间和空间上的被动约束。因而，我们需要掌握好如何表达我们的数据
用延后执行或立即执行策略的明确结果。我们需要掌握用来分析和控制空间、时间行为
的技术。

在这一章，我们将看下 Haskell 编程中可能遇到的典型空间和时间问题，并且如何有
条理地分析、理解并解决它们。为此我们将研究使用一系列的技术：时间和空间使用
分析，运行时统计，以及对立即执行和延时执行的推理。我们也会看下编译器优化对
性能的影响，和那些在纯函数式编程语言变得可行的高级优化技术的使用。那么，让
我们用一个挑战开始吧：压缩一个简单查找程序使用的内存。

