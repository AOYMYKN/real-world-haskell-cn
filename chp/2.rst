第二章：类型和函数
=====================

为什么要关心类型？
----------------------

Haskell 中的每个函数和表达式都带有各自的类型，通常称一个表达式拥有类型 ``T`` ，或者说这个表达式的类型为 ``T`` 。举个例子，布尔值 ``True`` 的类型为 ``Bool`` ，而字符串 ``"foo"`` 的类型为 ``String`` 。一个值的类型标识了它和该类型的其他值所共有的一簇属性（property）。比如我们可以对数字进行相加，对列表进行拼接，诸如此类。

在对 Haskell 的类型系统进行更深入的探讨之前，不妨先来了解下，我们为什么要关心类型 —— 也即是，它们是干什么用的？

在最低的层次上，计算机处理的都是没有任何附加结构的比特。而类型系统在这个基础上提供了\ *抽象*\ ：它为那些单纯的比特加上了意义，使得我们可以说“这些比特是文本”，“那些比特是机票预约数据”，等等。

通常情况下，类型系统还会在这个基础上更进一步：它会阻止使用者混合使用不同的类型，避免程序错误。比如说，类型系统通常不会允许将一个酒店预约数据当作汽车租凭数据来使用。

引入抽象的好处是，它使得我们可以忽略低层次的细节。比如说，如果我知道程序中的某个值是一个字符串，那么我不必考虑这个字符串在内部是如何实现的，我只要像操作其他字符串一样，操作这个字符串就可以了。

类型系统的一个有趣的地方是，不同的类型系统的表现并不完全相同。实际上，不同类型系统有时候处理的还是不同种类的问题。

除此之外，一门语言的类型系统，还会深切地影响这门语言的使用者思考和编写程序的方式。而 Haskell 的类型系统则允许程序员以非常抽象的层次思考，并写出简洁、高效、健壮的代码。
