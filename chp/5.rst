第五章：编写 JSON 库
=========================


JSON 简介
-----------

在这一章，我们将开发一个小而完整的 Haskell 库，这个库用于处理和序列化 JSON 数据。

JSON （JavaScript 对象符号）是一种小型、表示简单、便于存储和发送的语言。它通常用于从 web 服务向基于浏览器的 JavaScript 程序传送数据。JSON 的格式由 `www.json.org <www.json.org>`_ 描述，而细节由 `RFC 4627 <http://www.ietf.org/rfc/rfc4627.txt>`_ 补充。

JSON 支持四种基本类型值：字符串、数字、布尔值和一个特殊值， ``null`` 。

.. code-block:: json

    "a string"

    12345

    true

    null

JSON 还提供了两种复合类型：\ *数组*\ 是值的有序序列，而\ *对象*\ 则是“名字/值”对的无序收集器（unordered collection of name/value pairs）。其中对象的名字必须是字符串，而对象和数组的值则可以是任何 JSON 类型。

.. code-block:: json

    [-3.14, true, null, "a string"]

    {"numbers": [1,2,3,4,5], "useful": false}


在 Haskell 中表示 JSON 数据
--------------------------------

要在 Haskell 中处理 JSON 数据，可以用一个代数数据类型来表示 JSON 的各个数据类型：

::

    -- file: ch05/SimpleJSON.hs
    data JValue = JString String
                | JNumber Double
                | JBool Bool
                | JNull
                | JObject [(String, JValue)]
                | JArray [JValue]
                  deriving (Eq, Ord, Show)

[译注：这里的 ``JObject [(String, JValue)]`` 不能改为 ``JObject [(JString, JValue)]`` ，因为值构造器里面声明的是类构造器，不能是值构造器。

另外，严格来说， ``JObject`` 并不是完全无序的，因为它的定义使用了列表来包围，在书本的后面会介绍 ``Map`` 类型，它可以创建一个无序的键-值对结构。]

对于每个 JSON 类型，代码都定义了一个单独的值构造器。部分构造器带有参数，比如说，如果你要创建一个 JSON 字符串，那么就要给 ``JString`` 值构造器传入一个 ``String`` 类型值作为参数。

将这些定义载入到 ghci 试试看：

::

    Prelude> :load SimpleJSON
    [1 of 1] Compiling Main             ( SimpleJSON.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> JString "the quick brown fox"
    JString "the quick brown fox"

    *Main> JNumber 3.14
    JNumber 3.14

    *Main> JBool True
    JBool True

    *Main> JNull
    JNull

    *Main> JObject [("language", JString "Haskell"), ("complier", JString "GHC")]
    JObject [("language",JString "Haskell"),("complier",JString "GHC")]

    *Main> JArray [JString "Haskell", JString "Clojure", JString "Python"]
    JArray [JString "Haskell",JString "Clojure",JString "Python"]

前面代码中的构造器将一个 Haskell 值转换为一个 ``JValue`` 。反过来，同样可以通过模式匹配，从 ``JValue`` 中取出 Haskell 值。

以下函数试图从一个 ``JString`` 值中取出一个 Haskell 字符串：如果 ``JValue`` 真的包含一个字符串，那么程序返回一个用 ``Just`` 构造器包裹的字符串；否则，它返回一个 ``Nothing`` 。

::

    -- file: ch05/SimpleJSON.hs
    getString :: JValue -> Maybe String
    getString (JString s) = Just s
    getString _           = Nothing

保存修改过的源码文件，然后使用 ``:reload`` 命令重新载入 ``SimpleJSON.hs`` 文件（\ ``:reload`` 会自动记忆最近一次载入的文件）：

::

    *Main> :reload
    [1 of 1] Compiling Main             ( SimpleJSON.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> getString (JString "hello")
    Just "hello"

    *Main> getString (JNumber 3)
    Nothing

再加上一些其他函数，初步完成一些基本功能：

::
        
    -- file: ch05/SimpleJSON.hs
    getInt (JNumber n) = Just (truncate n)
    getInt _           = Nothing

    getBool (JBool b) = Just b
    getBool _         = Nothing

    getObject (JObject o) = Just o
    getObject _           = Nothing

    getArray (JArray a) = Just a
    getArray _          = Nothing

    isNull v            = v == JNull

``truncate`` 函数返回浮点数或者有理数的整数部分：

::

    Prelude> truncate 5.8
    5

    Prelude> :module +Data.Ratio

    Prelude Data.Ratio> truncate (22 % 7)
    3


Haskell 模块
------------------

一个 Haskell 文件可以包含一个模块定义，模块可以决定模块中的哪些名字可以被外部访问。

模块的定义必须放在其它定义之前：

::

    -- file: ch05/SimpleJSON.hs
    module SimpleJSON
        (
            JValue(..)
        ,   getString
        ,   getInt
        ,   getDouble
        ,   getBool
        ,   getObject
        ,   getArray
        ,   isNull
        ) where

单词 ``module`` 是保留字，跟在它之后的是模块的名字：模块名字必须以大写字母开头，并且它必须和包含这个模块的文件的基础名（不包含后缀的文件名）一致。比如上面定义的模块就以 ``SimpleJSON`` 命名，因为包含它的文件名为 ``SimpleJSON.hs`` 。

在模块名之后，用括号包围的是\ *导出*\ 列表（list of exports）。 ``where`` 关键字之后的内容为模块的体。

导出列表决定模块中的哪些名字对于外部模块是可见的，使得私有代码可以隐藏在模块的内部。跟在 ``JValue`` 之后的 ``(..)`` 符号表示导出 ``JValue`` 类型以及它的所有值构造器。

事实上，模块甚至可以只导出类型的名字（类构造器），而不导出这个类型的值构造器。这种能力非常重要：它允许模块对用户隐藏类型的细节，将一个类型变得\ *抽象*\ 。如果用户看不见类型的值构造器，他就没办法对类型的值进行模式匹配，也不能使用值构造器显式创建这种类型的值[译注：只能通过相应的 API 来创建这种类型的值]。本章稍后会说明，在什么情况下，我们需要将一个类型变得抽象。

如果省略掉模块定义中的导出部分，那么所有名字都会被导出：

::

    
    module ExportEverything where

如果不想导出模块中的任何名字（通常不会这么用），那么可以将导出列表留空，仅保留一对括号：

::

    module ExportNothing () where


编译 Haskell 代码
------------------

除了 ghci 之外， GHC 还包括一个生成本地码（navie code）的编译器： ghc 。如果你熟悉 gcc 或者 cl （微软 Visual Studio 使用的 C++ 编译器组件）之类的编译器，那么你对 ghc 应该不会感到陌生。

编译一个 Haskell 源码文件可以通过 ``ghc`` 命令来完成：

::

    $ ghc -c SimpleJSON.hs 

    $ ls
    SimpleJSON.hi  SimpleJSON.hs  SimpleJSON.o

``-c`` 表示让 ghc 只生成目标代码。如果省略 ``-c`` 选项，那么 ghc 就会试图生成一个完整的可执行文件，这会失败，因为目前的 ``SimpleJSON.hs`` 还没有定义 ``main`` 函数，而 GHC 在执行一个独立程序时会调用这个 ``main`` 函数。

在编译完成之后，会生成两个新文件。其中 ``SimpleJSON.hi`` 是\ *接口文件*\ （interface file）， ghc 以机器可读的格式，将模块中导出名字的信息保存在这个文件。而 ``SimpleJSON.o`` 则是\ *目标文件*\ （object file），它包含了已生成的机器码。


载入模块和生成可执行文件
---------------------------------

既然已经成功编译了 ``SimpleJSON`` 库，是时候写个小程序来执行它了。打开编辑器，将以下内容保存为 ``Main.hs`` ：

.. literalinclude:: /code/ch05/Main.hs

[译注：原文说，可以不导出 ``main`` 函数，但是实际中测试这种做法并不能通过编译。]

放在模块定义之后的 ``import`` 表示载入所有 ``SimpleJSON`` 模块导出的名字，使得它们在 ``Main`` 模块中可用。

所有 ``import`` 指令（directive）都必须出现在模块的开头，并且位于其他模块代码之前。不可以随意摆放 ``import`` 。

``Main.hs`` 的名字和 ``main`` 函数的命名是有特别含义的，要创建一个可执行文件， ghc 需要一个命名为 ``Main`` 的模块，并且这个模块里面还要有一个 ``main`` 函数，而 ``main`` 函数在程序执行时会被调用。

::

    ghc -o simple Main.hs

这次编译没有使用 ``-c`` 选项，因此 ghc 会尝试生成一个可执行程序，这个过程被称为\ *链接*\ （linking）。ghc 可以在一条命令中同时完成编译和链接的任务。

``-o`` 选项用于指定可执行程序的名字。在 Windows 平台下，它会生成一个 ``.exe`` 后缀的文件，而 UNIX 平台的文件则没有后缀。

ghc 会自动找到所需的文件，进行编译和链接，然后产生可执行文件，我们唯一要做的就是提供 ``Main.hs`` 文件。

[译注：在原文中说到，编译时必须手动列出所有相关文件，但是在新版 GHC 中，编译时提供 ``Main.hs`` 就可以了，编译器会自动找到、编译和链接相关代码。因此，本段内容做了相应的修改。]

一旦编译完成，就可以运行编译所得的可执行文件了：

::

    $ ./simple 
    JObject [("foo",JNumber 1.0),("bar",JBool False)]


打印 JSON 数据
------------------

SimpleJSON 模块已经有了 JSON 类型的表示了，那么下一步要做的就是将 Haskell 值翻译（render）成 JSON 数据。

有好几种方法可以将 Haskell 值翻译成 JSON 数据，最直接的一种是编写翻译函数，以 JSON 格式来打印 Haskell 值。稍后会介绍完成这个任务的其他更有趣方法。

::

    module PutJSON where

    import Data.List (intercalate)
    import SimpleJSON

    renderJValue :: JValue -> String

    renderJValue (JString s)   = show s
    renderJValue (JNumber n)   = show n
    renderJValue (JBool True)  = "true"
    renderJValue (JBool False) = "false"
    renderJValue JNull         = "null"

    renderJValue (JObject o) = "{" ++ pairs o ++ "}"
      where pairs [] = ""
        pairs ps = intercalate ", " (map renderPair ps)
        renderPair (k,v)   = show k ++ ": " ++ renderJValue v

    renderJValue (JArray a) = "[" ++ values a ++ "]"
      where values [] = ""
        values vs = intercalate ", " (map renderJValue vs)

分割纯代码和带有 IO 的代码是一种良好的 Haskell 风格。这里我们用 ``putJValue`` 来进行打印操作，这样就不会影响 ``renderJValue`` 的纯洁性：

::

    putJValue :: JValue -> IO ()
    putJValue v = putStrLn (renderJValue v)

现在打印 JSON 值变得容易得多了：

::

    Prelude SimpleJSON> :load PutJSON
    [2 of 2] Compiling PutJSON          ( PutJSON.hs, interpreted )
    Ok, modules loaded: PutJSON, SimpleJSON.

    *PutJSON> putJValue (JString "a")
    "a"

    *PutJSON> putJValue (JBool True)
    true

除了风格上的考虑之外，将翻译代码和实际打印代码分开，也有助于提升灵活性。比如说，如果想在数据写出之前进行压缩，那么只需要修改 ``putJValue`` 就可以了，不必改动整个 ``renderJValue`` 函数。

将纯代码和不纯代码分离的理念非常强大，并且在 Haskell 代码中无处不在。现有的一些 Haskell 压缩模块，它们都拥有简单的接口：压缩函数接受一个未压缩的字符串，并返回一个压缩后的字符串。通过组合使用不同的函数，可以在打印 JSON 值之前，对数据进行各种不同的处理。


.. _type-inference-is-a-double-edge-sword:

类型推导是一把双刃剑
---------------------------

Haskell 编译器的类型推导能力非常强大也非常有价值。在刚开始的时候，我们通常会倾向于尽可能地省略所有类型签名，让类型推导去决定所有函数的类型定义。

但是，这种做法是有缺陷的，它通常是 Haskell 新手引发类型错误的主要来源。

如果我们省略显式的类型信息时，那么编译器就必须猜测我们的意图：它会推导出合乎逻辑且相容的（consistent）类型，但是，这些类型可能并不是我们想要的。一旦程序员和编译器之间的想法产生了分歧，那么寻找 bug 的工作就会变得更困难。

作为例子，假设有一个函数，它预计会返回 ``String`` 类型的值，但是没有显式地为它编写类型签名：

::

    -- file: ch05/Trouble.hs

    import Data.Char (toUpper)

    upcaseFirst (c:cs) = toUpper c  -- 这里忘记了 ":cs"

这个函数试图将输入单词的第一个字母设置为大写，但是它在设置之后，忘记了重新拼接字符串的后续部分 ``xs`` 。在我们的预想中，这个函数的类型应该是 ``String -> String`` ，但编译器推导出的类型却是 ``String -> Char`` 。

现在，有另一个函数调用这个 ``upcaseFirst`` 函数：

::

    -- file: ch05/Trouble.hs

    camelCase :: String -> String
    camelCase xs = concat (map upcaseFirst (words xs))

这段代码在载入 ghci 时会发生错误：

::

    Prelude> :load Trouble.hs
    [1 of 1] Compiling Main             ( Trouble.hs, interpreted )

    Trouble.hs:8:28:
        Couldn't match expected type `[Char]' with actual type `Char'
        Expected type: [Char] -> [Char]
            Actual type: [Char] -> Char
        In the first argument of `map', namely `upcaseFirst'
        In the first argument of `concat', namely            `(map upcaseFirst (words xs))'
    Failed, modules loaded: none.

请注意，如果不是 ``upcaseFirst`` 被其他函数所调用的话，它的错误可能并不会被发现！相反，如果我们之前为 ``upcaseFirst`` 编写了类型签名的话，那么 ``upcaseFirst`` 的类型错误就会立即被捕捉到，并且可以即刻定位出错误发生的位置。

为函数编写类型签名，既可以移除我们实际想要的类型和编译器推导出的类型之间的分歧，也可以作为函数的一种文档，帮助阅读和理解函数的行为。

这并不是说要巨细无遗地为所有函数都编写类型签名。不过，为所有顶层（top-level）函数添加类型签名通常是一种不错的做法。在刚开始的时候最好尽可能地为函数添加类型签名，然后随着对类型系统了解的加深，逐步放松要求。


.. _a-more-general-look-at-rendering:

更通用的转换方式
--------------------

在前面构造 SimpleJSON 库时，我们的目标主要是按照 JSON 的格式，将 Haskell 数据转换为 JSON 值。而这些转换所得值的输出可能并不是那么适合人去阅读。有一些被称为美观打印器（pretty printer）的库，它们的输出既适合机器读入，也适合人类阅读。我们这就来编写一个美观打印器，学习库设计和函数式编程的相关技术。

这个美观打印器库命名为 Prettify ，它被包含在 ``Prettify.hs`` 文件里。为了让 Prettify 适用于实际需求，我们先编写一个新的 JSON 转换器，它使用 Prettify 提供的 API 。等完成这个 JSON 转换器之后，再转过头来补充 Prettify 模块的细节。

和前面的 SimpleJSON 模块不同，Prettify 模块将数据转换为一种称为 ``Doc`` 类型的抽象数据，而不是字符串：抽象类型允许我们随意选择不同的实现，最大化灵活性和效率，而且在更改实现时，不会影响到用户。

新的 JSON 转换模块被命名为 ``PrettyJSON.hs`` ，转换的工作依然由 ``renderJValue`` 函数进行，它的定义和之前一样简单直观：

::

    -- file: ch05/PrettyJSON.hs
    renderJValue :: JValue -> Doc
    renderJValue (JBool True)  = text "true"
    renderJValue (JBool False) = text "false"
    renderJValue JNull         = text "null"
    renderJValue (JNumber num) = double num
    renderJValue (JString str) = string str

其中 ``text`` 、 ``double`` 和 ``string`` 都由 Prettify 模块提供。


.. _developing-haskell-code-without-going-nuts:

Haskell 开发诀窍
----------------------

在刚开始进行 Haskell 开发的时候，通常需要面对大量崭新、不熟悉的概念，要一次性完成程序的编写，并顺利通过编译器检查，难度非常的高。

在每次完成一个功能点时，花几分钟停下来，对程序进行编译，是非常有益的：因为 Haskell 是强类型语言，如果程序能成功通过编译，那么说明程序和我们预想中的目标相去不远。

编写函数和类型的占位符（placeholder）版本，对于快速原型开发非常有效。举个例子，前文断言， ``string`` 、 ``text`` 和 ``double`` 函数都由 ``Prettify`` 模块提供，如果 ``Prettify`` 模块里不定义这些函数，或者不定义 ``Doc`` 类型，那么对程序的编译就会失败，我们的“早编译，常编译”战术就没有办法施展。通过编写占位符代码，可以避免这些问题：

::

    -- file: ch05/PrettyStub.hs
    import SimpleJSON

    data Doc = ToBeDefined
             deriving (Show)

     string :: String -> Doc
     string str = undefined

     text :: String -> Doc
     text str = undefined

     double :: Double -> Doc
     double num = undefined

特殊值 ``undefined`` 的类型为 ``a`` ，因此它可以让代码顺利通过类型检查。因为它只是一个占位符，没有什么实际作用，所以对它进行求值只会产生错误：

::

    *Main> :type undefined
    undefined :: a

    *Main> undefined
    *** Exception: Prelude.undefined

    *Main> :load PrettyStub.hs
    [2 of 2] Compiling Main             ( PrettyStub.hs, interpreted )
    Ok, modules loaded: Main, SimpleJSON.

    *Main> :type double
    double :: Double -> Doc

    *Main> double 3.14
    *** Exception: Prelude.undefined

尽管程序里还没有任何实际可执行的代码，但是编译器的类型检查器可以保证程序中类型的正确性，这为接下来的进一步开发奠定了良好基础。

美观打印字符串
----------------------

当需要美观地打印字符串时，我们需要遵守JSON的转义规则。字符串，顾名思义，仅仅是一串被包含在引号中的字符而已。

::

    -- file: ch05/PrettyJSON.hs
    string :: String -> Doc
    string = enclose '"' '"' . hcat . map oneChar

``enclose`` 函数把一个 ``Doc`` 值用初始字符和终止字符包起来。

::

    -- file: ch05/PrettyJSON.hs
    enclose :: Char -> Char -> Doc -> Doc
    enclose left right x = char left <> x <> char right

我们的美观打印库将会提供 ``(<>)`` 函数。它将两个 ``Doc`` 值拼接起来。也就是说，它是 ``Doc`` 中的 ``++`` 函数。

::

    -- file: ch05/PrettyStub.hs
    (<>) :: Doc -> Doc -> Doc
    a <> b = undefined

    char :: Char -> Doc
    char c = undefined

我们的美观打印库也会提供 ``hcat`` 函数。它将多个 ``Doc`` 值拼接成一个，类似列表中的 ``concat`` 函数。

::

    -- file: ch05/PrettyStub.hs
    hcat :: [Doc] -> Doc
    hcat xs = undefined

``string`` 函数将 ``oneChar`` 函数应用于字符串的每一个字符，然后把拼接起来的结果放入引号中。 ``oneChar`` 函数将一个单独的字符进行转义（escape）或转换（render）。

::

    -- file: ch05/PrettyJSON.hs
    oneChar :: Char -> Doc
    oneChar c = case lookup c simpleEscapes of
                  Just r -> text r
                  Nothing | mustEscape c -> hexEscape c
                          | otherwise    -> char c
        where mustEscape c = c < ' ' || c == '\x7f' || c > '\xff'

    simpleEscapes :: [(Char, String)]
    simpleEscapes = zipWith ch "\b\n\f\r\t\\\"/" "bnfrt\\\"/"
        where ch a b = (a, ['\\',b])

``simpleEscapes`` 是一个序对组成的列表。我们把由序对组成的列表称为\ *关联列表（association list）*\，或简称为\ *alist*\。我们的 alist 将字符和其对应的转义形式关联起来。

::

    ghci> take 4 simpleEscapes
    [('\b',"\\b"),('\n',"\\n"),('\f',"\\f"),('\r',"\\r")]

``case`` 表达式试图确定一个字符是否存在于 alist 当中。如果存在，我们就返回它对应的转义形式，否则我们就要用更复杂的方法来转义它。当两种转义都不需要时我们返回字符本身。保守地说，我们返回的非转义字符只包含可打印的 ASCII 字符。

上文提到的复杂的转义是将一个 Unicode 字符转为一个 “\u” 加上四个表示它编码16进制数字。

::

    -- file: ch05/PrettyJSON.hs
    smallHex :: Int -> Doc
    smallHex x  = text "\\u"
               <> text (replicate (4 - length h) '0')
               <> text h
        where h = showHex x ""

``showHex`` 函数来自于 ``Numeric`` 库（需要在 ``Prettify.hs`` 开头载入)，它返回一个数字的16进制表示。

::

    ghci> showHex 114111 ""
    "1bdbf"

``replicate`` 函数由 ``Prelude`` 提供，它创建一个长度确定的重复列表。

::

    ghci> replicate 5 "foo"
    ["foo","foo","foo","foo","foo"]

有一点需要注意： ``smallHex`` 提供的4位数字编码仅能够表示 ``0xffff`` 范围之内的 Unicode 字符。而合法的 Unicode 字符范围可达 ``0x10ffff`` 。为了使用 JSON 字符串表示这部分字符，我们需要遵循一些复杂的规则将它们一分为二。这使得我们有机会对 Haskell 数字进行一些位操作(bit-level manipulation)。

::

    -- file: ch05/PrettyJSON.hs
    astral :: Int -> Doc
    astral n = smallHex (a + 0xd800) <> smallHex (b + 0xdc00)
        where a = (n `shiftR` 10) .&. 0x3ff
              b = n .&. 0x3ff

``shiftR`` 函数来自 ``Data.bits`` 模块，它把一个数字右移一位。同样来自于 ``Data.bits`` 模块的 ``(.&.)`` 函数将两个数字进行按位与操作。

::

    ghci> 0x10000 `shiftR` 4   :: Int
    4096
    ghci> 7 .&. 2   :: Int
    2

有了 ``smallHex`` 和 ``astral`` ，我们可以如下定义 ``hexEscape`` ：

::

    -- file: ch05/PrettyJSON.hs
    hexEscape :: Char -> Doc
    hexEscape c | d < 0x10000 = smallHex d
                | otherwise   = astral (d - 0x10000)
        where d = ord c


Arrays and objects, and the module header
---------------------------------------------

Writing a module header
---------------------------------------------

Fleshing out the pretty printing library
---------------------------------------------

Creating a package
---------------------------------------------

Practical pointers and further reading
---------------------------------------------
