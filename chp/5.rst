第五章：编写 JSON 库
=========================


JSON 简介
-----------

在这一章，我们将开发一个小而完整的 Haskell 库，这个库用于处理和序列化 JSON 数据。

JSON （JavaScript 对象符号）是一种小型、表示简单、便于存储和发送的语言。它通常用于从 web 服务向阅览器 JavaScript 程序传送数据。JSON 的格式由 `www.json.org <www.json.org>`_ 描述，而细节由 `RFC 4627 <http://www.ietf.org/rfc/rfc4627.txt>`_ 补充。

JSON 支持四种基本类型值：字符串、数字、布尔值和一个特殊值， ``null`` 。

.. code-block:: json

    "a string"

    12345

    true

    null

JSON 还提供了两种符合类型：数组是值的一种有序序列，而对象则是“名字/值对”的无序收集器（unordered collection of name/value pairs），其中对象的名字必须是字符串，而对象和数组的值则可以是任何 JSON 类型。

.. code-block:: json

    [-3.14, true, null, "a string"]

    {"numbers": [1,2,3,4,5], "useful": false}


在 Haskell 中表示 JSON 数据
--------------------------------

要在 Haskell 中处理 JSON 数据，可以用一个代数数据类型来表示 JSON 的各个数据类型：

::

    -- file: ch05/SimpleJSON.hs
    data JValue = JString String
                | JNumber Double
                | JBool Bool
                | JNull
                | JObject [(String, JValue)]
                | JArray [JValue]
                  deriving (Eq, Ord, Show)

[译注：这里的 ``JObject [(String, JValue)]`` 不能改为 ``JObject [(JString, JValue)]`` ，因为值构造器里面声明的是类构造器，不能是值构造器。

另外，严格来说， ``JObject`` 并不是完全无序的，因为它的定义使用了列表来包围，在书本的后面会介绍 ``Map`` 类型，它可以创建一个无序的键-值对结构。]

对于每个 JSON 类型，代码都定义了一个单独的值构造器。部分构造器带有参数，比如说，如果你要创建一个 JSON 字符串，那么就要给 ``JString`` 值构造器传入一个 ``String`` 类型值作为参数。

将这些定义载入到 ghci 试试看：

::

    Prelude> :load SimpleJSON
    [1 of 1] Compiling Main             ( SimpleJSON.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> JString "the quick brown fox"
    JString "the quick brown fox"

    *Main> JNumber 3.14
    JNumber 3.14

    *Main> JBool True
    JBool True

    *Main> JNull
    JNull

    *Main> JObject [("language", JString "Haskell"), ("complier", JString "GHC")]
    JObject [("language",JString "Haskell"),("complier",JString "GHC")]

    *Main> JArray [JString "Haskell", JString "Clojure", JString "Python"]
    JArray [JString "Haskell",JString "Clojure",JString "Python"]

前面代码中的构造器将一个 Haskell 值转换为一个 ``JValue`` 。反过来，同样可以通过模式匹配，从 ``JValue`` 中取出 Haskell 值。

以下函数试图从一个 ``JString`` 值中取出一个 Haskell 字符串：如果 ``JValue`` 真的包含一个字符串，那么程序返回一个用 ``Just`` 构造器包裹的字符串；否则，它返回一个 ``Nothing`` 。

::

    -- file: ch05/SimpleJSON.hs
    getString :: JValue -> Maybe String
    getString (JString s) = Just s
    getString _           = Nothing

保存修改过的源码文件，然后使用 ``:reload`` 命令重新载入 ``SimpleJSON.hs`` 文件。（\ ``:reload`` 会自动记忆最近一次载入的文件）：

::

    *Main> :reload
    [1 of 1] Compiling Main             ( SimpleJSON.hs, interpreted )
    Ok, modules loaded: Main.

    *Main> getString (JString "hello")
    Just "hello"

    *Main> getString (JNumber 3)
    Nothing

在加上一些其他函数，初步完成一些基本功能：

::
        
    -- file: ch05/SimpleJSON.hs
    getInt (JNumber n) = Just (truncate n)
    getInt _           = Nothing

    getBool (JBool b) = Just b
    getBool _         = Nothing

    getObject (JObject o) = Just o
    getObject _           = Nothing

    getArray (JArray a) = Just a
    getArray _          = Nothing

    isNull v            = v == JNull

``truncate`` 函数通过将浮点数或者有理数的小数位丢掉来获得一个整数返回值：

::

    Prelude> truncate 5.8
    5

    Prelude> :module +Data.Ratio

    Prelude Data.Ratio> truncate (22 % 7)
    3


Haskell 模块
------------------

一个 Haskell 文件可以包含一个模块定义，模块可以决定模块中的哪些名字可以被外部访问。

模块的定义必须放在其他别的定义之前：

::

    -- file: ch05/SimpleJSON.hs
    module SimpleJSON
        (
            JValue(..)
        ,   getString
        ,   getInt
        ,   getDouble
        ,   getBool
        ,   getObject
        ,   getArray
        ,   isNull
        ) where

单词 ``module`` 是保留字，跟在它之后的是模块的名字：模块名字必须以大写字母开头，并且它必须和包含这个模块的文件的基础名（不包含后缀的文件名）一致。比如上面定义的模块就以 ``SimpleJSON`` 命名，因为包含它的文件名为 ``SimpleJSON.hs`` 。

在模块名之后，用括号包围的是\ *导出*\ 列表（list of exports）。 ``where`` 关键字之后的内容为模块的体。

导出列表决定模块中的哪些名字对于外部模块是可见的，使得私有代码可以隐藏在模块的内部。跟在 ``JValue`` 之后的 ``(..)`` 符号表示导出 ``JValue`` 类型以及它的所有值构造器。

事实上，模块甚至可以只导出类型的名字（类构造器），而不导出这个类型的值构造器。这种能力非常重要：它允许模块对用户隐藏类型的细节，将一个类型变得\ *抽象*\ 。如果用户看不见类型的值构造器，它就没办法对类型的值进行模式匹配，也不能使用值构造器显式创建这种类型的值[译注：只能通过相应的 API 来创建这种类型的值]。本章的稍后部分会说明，在什么情况下， 我们需要将一个类型变为抽象。

如果省略掉模块定义中的导出部分，那么所有名字都会被导出：

::

    
    module ExportEverything where

如果不想导出模块中的任何名字（通常不会这么用），那么可以将导出列表留空，仅保留一对括号：

::

    module ExportNothing () where


编译 Haskell 代码
------------------

除了 ghci 之外， GHC 还包括一个生成本地码（navie code）的编译器： ghc 。如果你熟悉 gcc 或者 cl （微软 Visual Studio 使用的 C++ 编译器组件）之类的编译器，那么你对 ghc 应该不会感到陌生。

编译一个 Haskell 源码文件可以通过 ``ghc`` 命令来完成：

::

    $ ghc -c SimpleJSON.hs 

    $ ls
    SimpleJSON.hi  SimpleJSON.hs  SimpleJSON.o

``-c`` 表示让 ghc 只生成目标代码。如果省略 ``-c`` 选项，那么 ghc 就会试图生成一个完整的可执行文件，这会造成失败，因为目前的 ``SimpleJSON.hs`` 还没有定义 ``main`` 函数，而 GHC 在执行一个独立程序时会调用这个 ``main`` 函数。

在编译完成之后，会生成两个新文件。其中 ``SimpleJSON.hi`` 是\ *接口文件*\ （interface file）， ghc 以机器可读的格式，将模块中导出名字的信息保存在这个文件。而 ``SimpleJSON.o`` 则是\ *目标文件*\ （object file），它包含了已生成的机器码。


载入模块和生成可执行文件
---------------------------------

既然已经成功编译了 ``SimpleJSON`` 库，是时候写个小程序来执行它了。打开的编辑器，将以下内容保存为 ``Main.hs`` ：

.. literalinclude:: /code/ch05/Main.hs

[译注：原文说，可以不导出 ``main`` 函数，但是实际中测试这种做法并不能通过编译。]

放在模块定义之后的 ``import`` 表示载入所有 ``SimpleJSON`` 模块导出的名字，使得它们在 ``Main`` 模块中可用。

所有 ``import`` 指令（directive）都必须出现在模块的开头，并且位于其他模块代码之前。不可以随意摆放 ``import`` 。

``Main.hs`` 的名字和 ``main`` 函数的命名是有特别含义的，要创建一个可执行文件， ghc 需要一个命名为 ``Main`` 的模块，并且这个模块里面还要有一个 ``main`` 函数，而 ``main`` 函数在程序执行时会被调用。

::

    $ ghc Main.hs 
    [1 of 2] Compiling SimpleJSON       ( SimpleJSON.hs, SimpleJSON.o )
    [2 of 2] Compiling Main             ( Main.hs, Main.o )
    Linking Main ...

这次编译没有使用 ``-c`` 选项，因此 ghc 会尝试生成一个可执行程序，这个过程被称为\ *链接*\ （linking）。Ghc 可以在一条命令中同时完成编译和链接的任务。

``-o`` 选项用于指定可执行程序的名字。在 Windows 平台下，它会生成一个 ``.exe`` 后缀的文件，而 UNIX 平台的文件则没有后缀。

Ghc 会自动找到所需的文件，进行编译和链接，然后产生可执行文件，我们唯一要做的就是提供 ``Main.hs`` 文件。

[译注：在原文中说到，编译时必须手动列出所有相关文件，但是在新版 GHC 中，编译时提供 ``Main.hs`` 就可以了，编译器会自动找到、编译和链接相关代码。因此，本段内容做了相应的修改。]

一旦编译完成，就可以运行编译所得的可执行文件了：

::

    $ ./simple 
    JObject [("foo",JNumber 1.0),("bar",JBool False)]


打印 JSON 数据
------------------

SimpleJSON 模块已经有了 JSON 类型的表示了，那么下一步要做的就是将 Haskell 值翻译（render）成 JSON 数据。

有好几种方法可以将 Haskell 值翻译成 JSON 数据，最直接的一种是编写翻译函数，以 JSON 格式来打印 Haskell 值。稍后会介绍完成这个任务的其他更有趣方法。

::

    module PutJSON where

    import Data.List (intercalate)
    import SimpleJSON

    renderJValue :: JValue -> String

    renderJValue (JString s)   = show s
    renderJValue (JNumber n)   = show n
    renderJValue (JBool True)  = "true"
    renderJValue (JBool False) = "false"
    renderJValue JNull         = "null"

    renderJValue (JObject o) = "{" ++ pairs o ++ "}"
      where pairs [] = ""
        pairs ps = intercalate ", " (map renderPair ps)
        renderPair (k,v)   = show k ++ ": " ++ renderJValue v

    renderJValue (JArray a) = "[" ++ values a ++ "]"
      where values [] = ""
        values vs = intercalate ", " (map renderJValue vs)

分割纯代码和带有 IO 的代码是一种良好的 Haskell 风格。这里我们用 ``putJValue`` 来进行打印操作，这样就不会影响 ``renderJValue`` 的纯洁性：

::

    putJValue :: JValue -> IO ()
    putJValue v = putStrLn (renderJValue v)

现在打印 JSON 值变得容易得多了：

::

    Prelude SimpleJSON> :load PutJSON
    [2 of 2] Compiling PutJSON          ( PutJSON.hs, interpreted )
    Ok, modules loaded: PutJSON, SimpleJSON.

    *PutJSON> putJValue (JString "a")
    "a"

    *PutJSON> putJValue (JBool True)
    true

除了风格上的考虑之外，将翻译代码和实际打印代码分开，也有助于提升灵活性。比如说，如果想在数据写出之前进行压缩，那么只需要修改 ``putJValue`` 就可以了，不必改动整个 ``renderJValue`` 函数。

分离纯代码和不纯代码的想法非常有效，并且在 Haskell 代码中无处不在。现有的一些 Haskell 压缩模块，它们都拥有简单的接口：压缩函数接受一个未压缩的字符串，并返回一个压缩后的字符串。通过组合使用不同的函数，可以在打印 JSON 值之前，对数据进行各种不同的处理。
